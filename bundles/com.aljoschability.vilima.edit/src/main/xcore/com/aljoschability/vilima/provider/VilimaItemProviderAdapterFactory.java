/**
 */
package com.aljoschability.vilima.provider;

import com.aljoschability.vilima.util.VilimaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VilimaItemProviderAdapterFactory extends VilimaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VilimaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.VilimaCatalog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VilimaCatalogItemProvider vilimaCatalogItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.VilimaCatalog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVilimaCatalogAdapter() {
		if (vilimaCatalogItemProvider == null) {
			vilimaCatalogItemProvider = new VilimaCatalogItemProvider(this);
		}

		return vilimaCatalogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.VilimaGenre} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VilimaGenreItemProvider vilimaGenreItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.VilimaGenre}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVilimaGenreAdapter() {
		if (vilimaGenreItemProvider == null) {
			vilimaGenreItemProvider = new VilimaGenreItemProvider(this);
		}

		return vilimaGenreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.VideoCodec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VideoCodecItemProvider videoCodecItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.VideoCodec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVideoCodecAdapter() {
		if (videoCodecItemProvider == null) {
			videoCodecItemProvider = new VideoCodecItemProvider(this);
		}

		return videoCodecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.AudioCodec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioCodecItemProvider audioCodecItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.AudioCodec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioCodecAdapter() {
		if (audioCodecItemProvider == null) {
			audioCodecItemProvider = new AudioCodecItemProvider(this);
		}

		return audioCodecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.SubtitleCodec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubtitleCodecItemProvider subtitleCodecItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.SubtitleCodec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubtitleCodecAdapter() {
		if (subtitleCodecItemProvider == null) {
			subtitleCodecItemProvider = new SubtitleCodecItemProvider(this);
		}

		return subtitleCodecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.VilimaContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VilimaContentItemProvider vilimaContentItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.VilimaContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVilimaContentAdapter() {
		if (vilimaContentItemProvider == null) {
			vilimaContentItemProvider = new VilimaContentItemProvider(this);
		}

		return vilimaContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.MkvFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MkvFileItemProvider mkvFileItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.MkvFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMkvFileAdapter() {
		if (mkvFileItemProvider == null) {
			mkvFileItemProvider = new MkvFileItemProvider(this);
		}

		return mkvFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.VilimaAttachment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VilimaAttachmentItemProvider vilimaAttachmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.VilimaAttachment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVilimaAttachmentAdapter() {
		if (vilimaAttachmentItemProvider == null) {
			vilimaAttachmentItemProvider = new VilimaAttachmentItemProvider(this);
		}

		return vilimaAttachmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.MkvChapterEdition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MkvChapterEditionItemProvider mkvChapterEditionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.MkvChapterEdition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMkvChapterEditionAdapter() {
		if (mkvChapterEditionItemProvider == null) {
			mkvChapterEditionItemProvider = new MkvChapterEditionItemProvider(this);
		}

		return mkvChapterEditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.MkvChapterEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MkvChapterEntryItemProvider mkvChapterEntryItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.MkvChapterEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMkvChapterEntryAdapter() {
		if (mkvChapterEntryItemProvider == null) {
			mkvChapterEntryItemProvider = new MkvChapterEntryItemProvider(this);
		}

		return mkvChapterEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.MkvTrack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MkvTrackItemProvider mkvTrackItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.MkvTrack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMkvTrackAdapter() {
		if (mkvTrackItemProvider == null) {
			mkvTrackItemProvider = new MkvTrackItemProvider(this);
		}

		return mkvTrackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.MkvTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MkvTagItemProvider mkvTagItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.MkvTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMkvTagAdapter() {
		if (mkvTagItemProvider == null) {
			mkvTagItemProvider = new MkvTagItemProvider(this);
		}

		return mkvTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.vilima.MkvTagEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MkvTagEntryItemProvider mkvTagEntryItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.vilima.MkvTagEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMkvTagEntryAdapter() {
		if (mkvTagEntryItemProvider == null) {
			mkvTagEntryItemProvider = new MkvTagEntryItemProvider(this);
		}

		return mkvTagEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (vilimaCatalogItemProvider != null) vilimaCatalogItemProvider.dispose();
		if (vilimaGenreItemProvider != null) vilimaGenreItemProvider.dispose();
		if (videoCodecItemProvider != null) videoCodecItemProvider.dispose();
		if (audioCodecItemProvider != null) audioCodecItemProvider.dispose();
		if (subtitleCodecItemProvider != null) subtitleCodecItemProvider.dispose();
		if (vilimaContentItemProvider != null) vilimaContentItemProvider.dispose();
		if (mkvFileItemProvider != null) mkvFileItemProvider.dispose();
		if (vilimaAttachmentItemProvider != null) vilimaAttachmentItemProvider.dispose();
		if (mkvChapterEditionItemProvider != null) mkvChapterEditionItemProvider.dispose();
		if (mkvChapterEntryItemProvider != null) mkvChapterEntryItemProvider.dispose();
		if (mkvTrackItemProvider != null) mkvTrackItemProvider.dispose();
		if (mkvTagItemProvider != null) mkvTagItemProvider.dispose();
		if (mkvTagEntryItemProvider != null) mkvTagEntryItemProvider.dispose();
	}

}
